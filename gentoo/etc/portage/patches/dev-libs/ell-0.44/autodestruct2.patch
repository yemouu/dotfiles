diff --git a/ell/log.h b/ell/log.h
index 924523b..49ed50c 100644
--- a/ell/log.h
+++ b/ell/log.h
@@ -79,12 +79,9 @@ void l_debug_add_section(struct l_debug_desc *start,
 					struct l_debug_desc *end);
 
 #define l_debug_enable(pattern) do { \
-_Pragma("GCC diagnostic push") \
-_Pragma("GCC diagnostic ignored \"-Wredundant-decls\"") \
 	extern struct l_debug_desc __start___ell_debug[]; \
 	extern struct l_debug_desc __stop___ell_debug[]; \
 	l_debug_enable_full(pattern, __start___ell_debug, __stop___ell_debug); \
-_Pragma("GCC diagnostic pop") \
 } while (0)
 
 void l_debug_disable(void);
diff --git a/ell/missing.h b/ell/missing.h
index 2a3e647..b5b6f89 100644
--- a/ell/missing.h
+++ b/ell/missing.h
@@ -71,9 +71,6 @@ static inline void explicit_bzero(void *s, size_t n)
 #ifndef HAVE_RAWMEMCHR
 static inline void *rawmemchr(const void *s, int c)
 {
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wstringop-overflow=\"")
 	return memchr(s, c, (size_t) -1);
-_Pragma("GCC diagnostic pop")
 }
 #endif
diff --git a/ell/tls.c b/ell/tls.c
index c246f1f..7148aab 100644
--- a/ell/tls.c
+++ b/ell/tls.c
@@ -1888,11 +1888,15 @@ decode_error:
 			"ServerHello decode error");
 }
 
+void l_certchain_cleanup(void *ptr) {
+	l_certchain_free(*(void **) ptr);
+}
+
 static void tls_handle_certificate(struct l_tls *tls,
 					const uint8_t *buf, size_t len)
 {
 	size_t total;
-	_auto_(l_certchain_free) struct l_certchain *certchain = NULL;
+	L_AUTO_CLEANUP_VAR(struct l_certchain *, certchain, l_certchain_cleanup) = NULL;
 	struct l_cert *leaf;
 	size_t der_len;
 	const uint8_t *der;
diff --git a/ell/util.h b/ell/util.h
index 3413561..6f811c8 100644
--- a/ell/util.h
+++ b/ell/util.h
@@ -36,11 +36,8 @@ extern "C" {
 #endif
 
 #define l_container_of(ptr, type, member) ({				\
-_Pragma("GCC diagnostic push")						\
-_Pragma("GCC diagnostic ignored \"-Wcast-align\"")			\
 		const __typeof__(((type *) 0)->member) *__mptr = (ptr);	\
 		(type *)((char *) __mptr - offsetof(type, member));	\
-_Pragma("GCC diagnostic pop")						\
 	})
 
 #define L_STRINGIFY(val) L_STRINGIFY_ARG(val)
