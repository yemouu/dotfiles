# Load Plugin Manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Plugins
plug "whereswaldon/shellcheck.kak"

# kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(python|c|cpp) %{
	lsp-enable-window
	def -hidden insert-a-n %{
		try %{
			lsp-snippets-select-next-placeholders
			exec '<a-;>d'
		} catch %{
			exec -with-hooks '<c-n>'
		}
	}
	map global insert <a-n> "<a-;>: insert-a-n<ret>"
}

# Template Command
define-command -params 1 -docstring \
"Print template into the current file. Templates are located at %val{config}/templates." \
template %{
	evaluate-commands %sh{
		[ -e "$kak_config/templates/$1" ] \
			&& printf '%s\n' "exec !cat<space>$kak_config/templates/$1<ret>" \
			|| printf '%s\n' "echo Template $1 doesn't exist."
	}
}

# Whitespace command
define-command -params 2 -docstring \
"Set whitespace options. Takes two arguments: <tabs|spaces> <size>" \
whitespace %{
	evaluate-commands %sh{
		[ "$1" = tabs ] \
			&& printf '%s\n' "evaluate-commands map global insert <tab> <tab>" \
			                 "evaluate-commands set-option global indentwidth 0" \
			                 "evaluate-commands set-option global tabstop $2"

		[ "$1" = spaces ] && {
			s=0
			while [ "$s" -lt "$2" ]
			do
				size="$size\ "
				s=$((s+1))
			done

			printf '%s\n' "evaluate-commands map global insert <tab> \"$size\"" \
			              "evaluate-commands set-option global indentwidth $2"
		}
	}
}

# Keybinds
map global user l ':enter-user-mode lsp<ret>' -docstring 'Enter kak-lsp user mode'
map global user p '!wl-paste<ret>' -docstring 'Paste from System Clipboard (Wayland)'
map global user y '<a-|>wl-copy<ret>' -docstring 'Copy to System Clipboard (Wayland)'

# Enable Wrapping
add-highlighter global/ wrap -indent -marker '$>'

# Highlight Matching Characters
add-highlighter global/ show-matching

# Highligh TODO and friends
add-highlighter global/ regex \b(TODO|FIXME)\b 0:default+rb

# Indentation Options
set-option global indentwidth 0
set-option global tabstop 8
hook global WinSetOption filetype=(css|html|xml) %{
	map global insert <tab> '  '
	set-option global indentwidth 2
}
hook global WinSetOption filetype=python %{
	map global insert <tab> '    '
	set-option global indentwidth 4
}

# Status Line
set-option global modelinefmt '%val{bufname} %val{cursor_char_column},%val{cursor_line} {{context_info}} {{mode_info}}'
set-option -add global modelinefmt ' - %sh{printf $USER} %sh{date +"%R %Z"} '

# Colorscheme
evaluate-commands %sh{
	[ "$TERM" = linux ] && return 0
	. $(cat $HOME/tmp/cache/thm/current_thm)
	case $theme_type in
		light ) printf '%s\n' "colorscheme theme-light" ;;
		dark  ) printf '%s\n' "colorscheme theme-dark" ;;
		*     ) return 0 ;;
	esac
}
