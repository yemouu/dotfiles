# Load Plugin Manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Plugins
plug "whereswaldon/shellcheck.kak"

# kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(python|c|cpp) %{
	lsp-enable-window
	def -hidden insert-a-n %{
		try %{
			lsp-snippets-select-next-placeholders
			exec '<a-;>d'
		} catch %{
			exec -with-hooks '<c-n>'
		}
	}
	map global insert <a-n> "<a-;>: insert-a-n<ret>"
}

# Column Indicator
define-command -params 2..3 -docstring \
"Add or remove column indicators. Takes three arguments: <add|remove> <column_number> <color>
Where color is in the format <foreground>[,background][+attribute]." \
columnindicator %{
	evaluate-commands %sh{
		[ "$1" = add ] && {
			[ "$3" ] && color=$3 || color=default,bright-white
			printf '%s\n' "eval addhl global/ column $2 $color"
		}

		[ "$1" = remove ] && {
			[ "$3" ] && color=$3 || color=default,bright-white
			printf '%s\n' "eval rmhl global/column_$2_$color"
		}
	}
}

# Template Command
define-command -params 1 -docstring \
"Print template into the current file. Templates are located at %val{config}/templates." \
template %{
	evaluate-commands %sh{
		[ -e "$kak_config/templates/$1" ] \
			&& printf '%s\n' "exec !cat<space>$kak_config/templates/$1<ret>" \
			|| printf '%s\n' "echo Template $1 doesn't exist."
	}
}

# Whitespace command
define-command -params 2 -docstring \
"Set whitespace options. Takes two arguments: <tabs|spaces> <size>" \
whitespace %{
	evaluate-commands %sh{
		[ "$1" = tabs ] \
			&& printf '%s\n' "eval map global insert <tab> <tab>" \
			                 "eval set global indentwidth 0" \
			                 "eval set global tabstop $2"

		[ "$1" = spaces ] && {
			s=0
			while [ "$s" -lt "$2" ]
			do
				size="$size\ "
				s=$((s+1))
			done

			printf '%s\n' "eval map global insert <tab> \"$size\"" \
			              "eval set global indentwidth $2"
		}
	}
}

# Keybinds
map global user l ':enter-user-mode lsp<ret>' -docstring 'Enter kak-lsp user mode'
map global user p '!wl-paste<ret>' -docstring 'Paste from System Clipboard (Wayland)'
map global user y '<a-|>wl-copy<ret>' -docstring 'Copy to System Clipboard (Wayland)'

# Enable Wrapping
add-highlighter global/ wrap -indent #-marker '$>'

# Highlight Matching Characters
add-highlighter global/ show-matching

# Highligh TODO and friends
add-highlighter global/ regex \b(TODO|FIXME)\b 0:default+rb

# Set theme_type
evaluate-commands %sh{
	[ "$TERM" = linux ] && { 
		printf '%s\n' "decl str theme_type none"
		return 0
	}
	. $(cat $HOME/tmp/cache/thm/current_thm)
	case $theme_type in
		light ) printf '%s\n' "decl str theme_type light" ;;
		dark  ) printf '%s\n' "decl str theme_type dark" ;;
		*     ) return 0 ;;
	esac
}

# Add column indicator at column 100
columnindicator add 100

# Indentation Options
set-option global indentwidth 0
set-option global tabstop 4

# Filetype specific options
hook global WinSetOption filetype=(css|html|xml|markdown) %{
	whitespace spaces 2
}
hook global WinSetOption filetype=python %{
	whitespace spaces 4
}
hook global WinSetOption filetype=git-commit %{
	columnindicator remove 100
	columnindicator add 70
}
hook global WinSetOption filetype=markdown %{
	columnindicator remove 100
	remove-highlighter global/wrap_-indent
	add-highlighter global/ wrap -indent -word
}

# Status Line
set global modelinefmt '%val{bufname} %val{cursor_char_column},%val{cursor_line} {{context_info}}'
set -add global modelinefmt ' {{mode_info}} - %sh{printf $USER} %sh{date +"%R %Z"} '

# Set colorscheme
evaluate-commands %sh{
	case "$kak_opt_theme_type" in
		dark ) printf '%s\n' "colorscheme theme-dark" ;;
		*    ) printf '%s\n' "colorscheme theme" ;;
	esac
}
