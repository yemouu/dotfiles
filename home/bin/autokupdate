#!/bin/sh
# Automatically configure the kernel using a configure script. This script
# is meant to run as the root user. This script will not touch the kernel
# symlink and will build the kernel located at /usr/src/linux (AKU_DIR).

# What it does
# 	- Generates the default config
# 	- Runs the config script $HOME/kernel-config.sh (AKU_CONFIG_SCRIPT)
# 		- $HOME in this case should be the root user's home directory (usually /root)
# 		- If the script does not exist, the script will exit immediately
# 		- A sample of of a kernel-config.sh can be found in my dotfiles at
# 		  GitHub (https://github.com/yeemou/setup/gentoo/root/kernel-config.sh) or
# 		  GitLab (https://gitlab.com/yemou/setup/gentoo/root/kernel-config.sh)
# 	- Compiles the kernel
# 	- Copies bzImage to it's dest dir /boot/EFI/Gentoo/bzImage (AKU_DEST)
# 		- If a file is already at this location, a backup will be made
# 		  within the directory
# 		- If the AKU_DEST is set to `none` kernel files will not be copied

# Exit on error
set -e

# Set default values if environment variables aren't set
[ "$AKU_CONFIG_SCRIPT" ] || AKU_CONFIG_SCRIPT=${HOME}/kernel-config.sh
[ "$AKU_DIR" ] || AKU_DIR=/usr/src/linux
[ "$AKU_DEST" ] || AKU_DEST=/boot/EFI/Gentoo

msg() {
	case $1 in
		e ) shift; printf '%s\n' "${0##*/}: $*" 1>&2 ;;
		* ) printf '%s\n' "${0##*/}: $*" ;;
	esac
}

# Sanity Checks
[ -x "$AKU_CONFIG_SCRIPT" ] || {
	msg e "\`$AKU_CONFIG_SCRIPT\`: doesn't exist or isn't executable"
	exit 1
}
[ -d "$AKU_DIR" ] || { msg e "\`$AKU_DIR\`: does not exist"; exit 1; }

# Check for `portageq`
command -v portageq > /dev/null 2>&1 && AKU_PORTAGEQ=1

# Set MAKEOPTS if not already set
[ "$MAKEOPTS" ] || {
	[ "$AKU_PORTAGEQ" ] && MAKEOPTS="$(portageq envvar MAKEOPTS)" || MAKEOPTS="=j$(nproc)"
}

# If CC is set to clang in portage, enable LLVM and LLVM_IAS, but
# if LLVM and LLVM_IAS is already set, don't change it.
command -v portageq > /dev/null 2>&1 && {
	case $(portageq envvar CC) in
		*clang* )
			[ "$LLVM" ] || export LLVM=1
			[ "$LLVM_IAS" ] || export LLVM_IAS=1 ;;
	esac
}

cd "$AKU_DIR"

# Clean any residue. Not doing this can sometimes cause errors
# shellcheck disable=SC2086
make ${MAKEOPTS} clean

# Generate default config
# shellcheck disable=SC2086
make ${MAKEOPTS} defconfig

# Run user's kernel configuration script
"$AKU_CONFIG_SCRIPT"

# Compile the kenrel
# shellcheck disable=SC2086
make ${MAKEOPTS}

[ "$AKU_DEST" = "none" ] || {
	# Ensure the destination directory exist
	mkdir -p "$AKU_DEST"

	# Create a backup if necessary
	[ -e "$AKU_DEST/bzImage" ] && cp "$AKU_DEST/bzImage" "$AKU_DEST/bzImage.bak"

	# Copy new kernel to destination
	cp "$AKU_DIR/arch/x86/boot/bzImage" "$AKU_DEST"
}
