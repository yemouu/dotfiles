# Load Plugin Manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Plugins
plug "whereswaldon/shellcheck.kak"

# kak-lsp
eval %sh{ kak-lsp }

hook global WinSetOption filetype=(c|cpp|go|nix|python|typst|zig|java) %{
	lsp-enable-window

	map global user l %{:enter-user-mode lsp<ret>} -docstring 'Enter kak-lsp mode'
	map global insert -docstring %{
		Select next snippet placeholder
	} <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{execute-keys -with-hooks <lt>tab> }<ret>'

	map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
	map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
	map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
	map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface/struct'
	map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors & warnings'
	map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

	lsp-inlay-hints-enable window
	lsp-inlay-diagnostics-enable window
}

hook -group lsp-filetype-nix global BufSetOption filetype=nix %{
	set-option buffer lsp_servers %{
		[nixd]
		root_globs = [ "flake.nix", "shell.nix", ".git", ".hg" ]
	}
}

hook -group lsp-filetype-python global BufSetOption filetype=python %{
	set-option buffer lsp_servers %{
		[ruff]
		args = [ "server", "--quiet" ]
		root_globs = [ "requirements.txt", "setup.py", "pyproject.toml", ".git" ]
		settings_section = "_"
		# [ruff.settings._.globalSettings]
	}
}

hook -group lsp-filetype-typst global BufSetOption filetype=typst %{
	set-option buffer lsp_servers %{
		[tinymist]
		root_globs = [ ".git" ]
		settings_section = "tinymist"
		[tinymist.settings.tinymist]
		outputPath = "/tmp/tinymist/$root/$dir/$name"
		fontPaths = [ "./assets/fonts" ]
		formatterMode = "typstyle"
		exportPdf = "onType"
	}
}

hook -group lsp global WinSetOption filetype=go %{
	hook -group lsp-format buffer BufWritePost .* %{
		evaluate-commands %sh{
			goimports -e -w "$kak_buffile"
		}
		edit!
	}
}

# Column Indicator
define-command -params 2..3 -docstring \
"Add or remove column indicators. Takes three arguments: <add|remove> <column_number> <color>
Where color is in the format <foreground>[,background][+attribute]." \
m-columnindicator %{
	evaluate-commands %sh{
		[ "$1" = add ] && {
			[ "$3" ] && color=$3 || color=default,bright-white
			printf '%s\n' "eval addhl window/ column $(($2 + 1)) $color"
		}

		[ "$1" = remove ] && {
			[ "$3" ] && color=$3 || color=default,bright-white
			printf '%s\n' "eval rmhl window/column_$(($2 + 1))_$color"
		}
	}
}

# Template Command
define-command -params 1 -docstring \
"Print template into the current file. Templates are located at %val{config}/templates." \
m-template %{
	evaluate-commands %sh{
		[ -e "$kak_config/templates/$1" ] \
			&& printf '%s\n' "exec !cat<space>$kak_config/templates/$1<ret>" \
			|| printf '%s\n' "echo Template $1 doesn't exist."
	}
} -shell-script-candidates %{ cd "$kak_config/templates"; printf '%s\n' * }

# Whitespace command
define-command -params 2 -docstring \
"Set whitespace options. Takes two arguments: <tabs|spaces> <size>" \
m-whitespace %{
	evaluate-commands %sh{
		[ "$1" = tabs ] \
			&& printf '%s\n' "eval map window insert <tab> <tab>" \
			                 "eval set window indentwidth 0" \
			                 "eval set window tabstop $2"

		[ "$1" = spaces ] && {
			s=0
			while [ "$s" -lt "$2" ]
			do
				size="$size\ "
				s=$((s+1))
			done

			printf '%s\n' "eval map window insert <tab> \"$size\"" \
			              "eval set window indentwidth $2"
		}
	}
}

# Keybinds
## User
map global user c ':comment-line<ret>' -docstring 'comment line'
map global user C ':comment-block<ret>' -docstring 'comment block'
map global user f ':try format catch lsp-formatting<ret>' -docstring 'Run formatcmd or lsp formatter'
map global user p '!wl-paste<ret>' -docstring 'Paste from System Clipboard (Wayland)'
map global user y '<a-|>wl-copy<ret>' -docstring 'Copy to System Clipboard (Wayland)'

# Set termcmd
hook global ModuleLoaded wayland %{
	set-option global termcmd "foot sh -c"
}

# Enable Wrapping
add-highlighter global/ wrap -indent

# Highlight Matching Characters
add-highlighter global/ show-matching

# Highlight TODO and friends
add-highlighter global/ regex \b(TODO|FIXME)\b 0:default+rb

# Show Trailing Whitespace
add-highlighter global/ show-whitespaces -lf ' ' -indent '' -spc 'â–ˆ' -only-trailing

# Set theme_type
evaluate-commands %sh{
	[ "$TERM" = linux ] && {
		printf '%s\n' "decl str theme_type none"
		return 0
	}
	. $(cat "${XDG_STATE_HOME:-$HOME/.local/state}/thm/current_thm")
	case $theme_type in
		light ) printf '%s\n' "decl str theme_type light" ;;
		dark  ) printf '%s\n' "decl str theme_type dark" ;;
		*     ) return 0 ;;
	esac
}

hook global WinCreate .* %{
	# Add column indicator at column 101
	m-columnindicator add 120

	# Indentation Options
	set-option window indentwidth 0
	set-option window tabstop 4
}

# Filetype specific options
hook global WinSetOption filetype=(css|html|java|markdown|nix|typst|xml|yaml) %{
	m-whitespace spaces 2
}

# hook global WinSetOption filetype=html %{
# 	m-columnindicator remove 100
# 	m-columnindicator add 120
# }

hook global WinSetOption filetype=nix %{
	set-option buffer formatcmd "nixpkgs-fmt"
}

hook global WinSetOption filetype=java %{
	set-option buffer formatcmd "google-java-format -"
}

hook global WinSetOption filetype=(python|zig) %{
	m-whitespace spaces 4
}

hook global WinSetOption filetype=zig %{
	set-option buffer formatcmd "zig fmt --stdin"
}

hook global WinSetOption filetype=git-commit %{
	m-columnindicator remove 120
	m-columnindicator add 70
}

hook global WinSetOption filetype=markdown %{
	m-columnindicator remove 120
	remove-highlighter global/wrap_-indent
	add-highlighter global/ wrap -indent -word
}

# Status Line
# set global modelinefmt '%val{bufname} %val{cursor_char_column},%val{cursor_line} {{context_info}} '
# set -add global modelinefmt '{{mode_info}} - %sh{printf $USER} %sh{date +"%R %Z"} '
#set -add global modelinefmt '%sh{cat /sys/class/power_supply/BAT0/capacity} '

# Set colorscheme
evaluate-commands %sh{
	case "$kak_opt_theme_type" in
		dark  ) printf '%s\n' "colorscheme theme-dark" ;;
		light ) printf '%s\n' "colorscheme theme" ;;
		*     ) printf '%s\n' "colorscheme default" ;;
	esac
}
